// Code generated by protoc-gen-go.
// source: crawldoc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	crawldoc.proto

It has these top-level messages:
	ConnectionInfo
	OutLink
	FetchHint
	CrawlParam
	CrawlHistory
	CrawlDoc
	CrawlDocs
	CrawlRequest
	CrawlResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type ReturnType int32

const (
	ReturnType_UNKNOWN            ReturnType = 0
	ReturnType_NODNS              ReturnType = 1
	ReturnType_NOCONNECTION       ReturnType = 2
	ReturnType_FORBIDDENROBOTS    ReturnType = 3
	ReturnType_TIMEOUT            ReturnType = 4
	ReturnType_BADTYPE            ReturnType = 5
	ReturnType_TOOBIG             ReturnType = 6
	ReturnType_BADHEADER          ReturnType = 7
	ReturnType_NETWORKERROR       ReturnType = 8
	ReturnType_SITEQUEUEFULL      ReturnType = 9
	ReturnType_INVALIDURL         ReturnType = 10
	ReturnType_INVALIDREDIRECTURL ReturnType = 11
	ReturnType_META_REDIRECT      ReturnType = 12
	ReturnType_JS_REDIRECT        ReturnType = 13
	ReturnType_IP_BLACKLISTED     ReturnType = 14
	ReturnType_BADCONTENT         ReturnType = 15
	ReturnType_URL_BLACKLISTED    ReturnType = 16
	ReturnType_STATUS100          ReturnType = 100
	ReturnType_STATUS101          ReturnType = 101
	ReturnType_STATUS200          ReturnType = 200
	ReturnType_STATUS201          ReturnType = 201
	ReturnType_STATUS202          ReturnType = 202
	ReturnType_STATUS203          ReturnType = 203
	ReturnType_STATUS204          ReturnType = 204
	ReturnType_STATUS205          ReturnType = 205
	ReturnType_STATUS206          ReturnType = 206
	ReturnType_STATUS300          ReturnType = 300
	ReturnType_STATUS301          ReturnType = 301
	ReturnType_STATUS302          ReturnType = 302
	ReturnType_STATUS303          ReturnType = 303
	ReturnType_STATUS304          ReturnType = 304
	ReturnType_STATUS305          ReturnType = 305
	ReturnType_STATUS306          ReturnType = 306
	ReturnType_STATUS307          ReturnType = 307
	ReturnType_STATUS400          ReturnType = 400
	ReturnType_STATUS401          ReturnType = 401
	ReturnType_STATUS402          ReturnType = 402
	ReturnType_STATUS403          ReturnType = 403
	ReturnType_STATUS404          ReturnType = 404
	ReturnType_STATUS405          ReturnType = 405
	ReturnType_STATUS406          ReturnType = 406
	ReturnType_STATUS407          ReturnType = 407
	ReturnType_STATUS408          ReturnType = 408
	ReturnType_STATUS409          ReturnType = 409
	ReturnType_STATUS410          ReturnType = 410
	ReturnType_STATUS411          ReturnType = 411
	ReturnType_STATUS412          ReturnType = 412
	ReturnType_STATUS413          ReturnType = 413
	ReturnType_STATUS414          ReturnType = 414
	ReturnType_STATUS415          ReturnType = 415
	ReturnType_STATUS416          ReturnType = 416
	ReturnType_STATUS417          ReturnType = 417
	ReturnType_STATUS500          ReturnType = 500
	ReturnType_STATUS501          ReturnType = 501
	ReturnType_STATUS502          ReturnType = 502
	ReturnType_STATUS503          ReturnType = 503
	ReturnType_STATUS504          ReturnType = 504
	ReturnType_STATUS505          ReturnType = 505
	ReturnType_STATUS509          ReturnType = 509
	ReturnType_STATUS510          ReturnType = 510
)

var ReturnType_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "NODNS",
	2:   "NOCONNECTION",
	3:   "FORBIDDENROBOTS",
	4:   "TIMEOUT",
	5:   "BADTYPE",
	6:   "TOOBIG",
	7:   "BADHEADER",
	8:   "NETWORKERROR",
	9:   "SITEQUEUEFULL",
	10:  "INVALIDURL",
	11:  "INVALIDREDIRECTURL",
	12:  "META_REDIRECT",
	13:  "JS_REDIRECT",
	14:  "IP_BLACKLISTED",
	15:  "BADCONTENT",
	16:  "URL_BLACKLISTED",
	100: "STATUS100",
	101: "STATUS101",
	200: "STATUS200",
	201: "STATUS201",
	202: "STATUS202",
	203: "STATUS203",
	204: "STATUS204",
	205: "STATUS205",
	206: "STATUS206",
	300: "STATUS300",
	301: "STATUS301",
	302: "STATUS302",
	303: "STATUS303",
	304: "STATUS304",
	305: "STATUS305",
	306: "STATUS306",
	307: "STATUS307",
	400: "STATUS400",
	401: "STATUS401",
	402: "STATUS402",
	403: "STATUS403",
	404: "STATUS404",
	405: "STATUS405",
	406: "STATUS406",
	407: "STATUS407",
	408: "STATUS408",
	409: "STATUS409",
	410: "STATUS410",
	411: "STATUS411",
	412: "STATUS412",
	413: "STATUS413",
	414: "STATUS414",
	415: "STATUS415",
	416: "STATUS416",
	417: "STATUS417",
	500: "STATUS500",
	501: "STATUS501",
	502: "STATUS502",
	503: "STATUS503",
	504: "STATUS504",
	505: "STATUS505",
	509: "STATUS509",
	510: "STATUS510",
}
var ReturnType_value = map[string]int32{
	"UNKNOWN":            0,
	"NODNS":              1,
	"NOCONNECTION":       2,
	"FORBIDDENROBOTS":    3,
	"TIMEOUT":            4,
	"BADTYPE":            5,
	"TOOBIG":             6,
	"BADHEADER":          7,
	"NETWORKERROR":       8,
	"SITEQUEUEFULL":      9,
	"INVALIDURL":         10,
	"INVALIDREDIRECTURL": 11,
	"META_REDIRECT":      12,
	"JS_REDIRECT":        13,
	"IP_BLACKLISTED":     14,
	"BADCONTENT":         15,
	"URL_BLACKLISTED":    16,
	"STATUS100":          100,
	"STATUS101":          101,
	"STATUS200":          200,
	"STATUS201":          201,
	"STATUS202":          202,
	"STATUS203":          203,
	"STATUS204":          204,
	"STATUS205":          205,
	"STATUS206":          206,
	"STATUS300":          300,
	"STATUS301":          301,
	"STATUS302":          302,
	"STATUS303":          303,
	"STATUS304":          304,
	"STATUS305":          305,
	"STATUS306":          306,
	"STATUS307":          307,
	"STATUS400":          400,
	"STATUS401":          401,
	"STATUS402":          402,
	"STATUS403":          403,
	"STATUS404":          404,
	"STATUS405":          405,
	"STATUS406":          406,
	"STATUS407":          407,
	"STATUS408":          408,
	"STATUS409":          409,
	"STATUS410":          410,
	"STATUS411":          411,
	"STATUS412":          412,
	"STATUS413":          413,
	"STATUS414":          414,
	"STATUS415":          415,
	"STATUS416":          416,
	"STATUS417":          417,
	"STATUS500":          500,
	"STATUS501":          501,
	"STATUS502":          502,
	"STATUS503":          503,
	"STATUS504":          504,
	"STATUS505":          505,
	"STATUS509":          509,
	"STATUS510":          510,
}

func (x ReturnType) String() string {
	return proto1.EnumName(ReturnType_name, int32(x))
}
func (ReturnType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestType int32

const (
	RequestType_TESTING RequestType = 0
	RequestType_GENERAL RequestType = 1
)

var RequestType_name = map[int32]string{
	0: "TESTING",
	1: "GENERAL",
}
var RequestType_value = map[string]int32{
	"TESTING": 0,
	"GENERAL": 1,
}

func (x RequestType) String() string {
	return proto1.EnumName(RequestType_name, int32(x))
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Priority int32

const (
	Priority_NORMAL Priority = 0
	Priority_URGENT Priority = 1
)

var Priority_name = map[int32]string{
	0: "NORMAL",
	1: "URGENT",
}
var Priority_value = map[string]int32{
	"NORMAL": 0,
	"URGENT": 1,
}

func (x Priority) String() string {
	return proto1.EnumName(Priority_name, int32(x))
}
func (Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DocType int32

const (
	DocType_NORMALDOC   DocType = 0
	DocType_WEB_MAIN    DocType = 1
	DocType_WEB_HUB     DocType = 2
	DocType_WEB_CONTENT DocType = 3
)

var DocType_name = map[int32]string{
	0: "NORMALDOC",
	1: "WEB_MAIN",
	2: "WEB_HUB",
	3: "WEB_CONTENT",
}
var DocType_value = map[string]int32{
	"NORMALDOC":   0,
	"WEB_MAIN":    1,
	"WEB_HUB":     2,
	"WEB_CONTENT": 3,
}

func (x DocType) String() string {
	return proto1.EnumName(DocType_name, int32(x))
}
func (DocType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ConnectionInfo struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto1.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OutLink struct {
	Url  string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *OutLink) Reset()                    { *m = OutLink{} }
func (m *OutLink) String() string            { return proto1.CompactTextString(m) }
func (*OutLink) ProtoMessage()               {}
func (*OutLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchHint struct {
	Host     string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Ip       int32  `protobuf:"varint,3,opt,name=ip" json:"ip,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	PostData string `protobuf:"bytes,5,opt,name=post_data" json:"post_data,omitempty"`
}

func (m *FetchHint) Reset()                    { *m = FetchHint{} }
func (m *FetchHint) String() string            { return proto1.CompactTextString(m) }
func (*FetchHint) ProtoMessage()               {}
func (*FetchHint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CrawlParam struct {
	Pri            Priority          `protobuf:"varint,1,opt,name=pri,enum=proto.Priority" json:"pri,omitempty"`
	Hostload       int32             `protobuf:"varint,2,opt,name=hostload" json:"hostload,omitempty"`
	RandomHostload bool              `protobuf:"varint,3,opt,name=random_hostload" json:"random_hostload,omitempty"`
	DropContent    bool              `protobuf:"varint,4,opt,name=drop_content" json:"drop_content,omitempty"`
	Dtype          DocType           `protobuf:"varint,5,opt,name=dtype,enum=proto.DocType" json:"dtype,omitempty"`
	StorePath      string            `protobuf:"bytes,6,opt,name=store_path" json:"store_path,omitempty"`
	StoreDb        string            `protobuf:"bytes,7,opt,name=store_db" json:"store_db,omitempty"`
	StoreTable     string            `protobuf:"bytes,8,opt,name=store_table" json:"store_table,omitempty"`
	FakeHost       string            `protobuf:"bytes,9,opt,name=fake_host" json:"fake_host,omitempty"`
	Rtype          RequestType       `protobuf:"varint,10,opt,name=rtype,enum=proto.RequestType" json:"rtype,omitempty"`
	FetchHint      *FetchHint        `protobuf:"bytes,11,opt,name=fetch_hint" json:"fetch_hint,omitempty"`
	Receivers      []*ConnectionInfo `protobuf:"bytes,12,rep,name=receivers" json:"receivers,omitempty"`
	PrimaryTag     string            `protobuf:"bytes,13,opt,name=primary_tag" json:"primary_tag,omitempty"`
	SecondaryTag   []string          `protobuf:"bytes,14,rep,name=secondary_tag" json:"secondary_tag,omitempty"`
}

func (m *CrawlParam) Reset()                    { *m = CrawlParam{} }
func (m *CrawlParam) String() string            { return proto1.CompactTextString(m) }
func (*CrawlParam) ProtoMessage()               {}
func (*CrawlParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CrawlParam) GetFetchHint() *FetchHint {
	if m != nil {
		return m.FetchHint
	}
	return nil
}

func (m *CrawlParam) GetReceivers() []*ConnectionInfo {
	if m != nil {
		return m.Receivers
	}
	return nil
}

type CrawlHistory struct {
}

func (m *CrawlHistory) Reset()                    { *m = CrawlHistory{} }
func (m *CrawlHistory) String() string            { return proto1.CompactTextString(m) }
func (*CrawlHistory) ProtoMessage()               {}
func (*CrawlHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CrawlDoc struct {
	Docid      string `protobuf:"bytes,1,opt,name=docid" json:"docid,omitempty"`
	RequestUrl string `protobuf:"bytes,2,opt,name=request_url" json:"request_url,omitempty"`
	// url use to crawl. it's generated base on request url
	Url               string     `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	RedirectUrl       string     `protobuf:"bytes,4,opt,name=redirect_url" json:"redirect_url,omitempty"`
	Code              ReturnType `protobuf:"varint,5,opt,name=code,enum=proto.ReturnType" json:"code,omitempty"`
	Content           string     `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	ContentCompressed bool       `protobuf:"varint,7,opt,name=content_compressed" json:"content_compressed,omitempty"`
	// time the doc fetched
	Timestamp         int64      `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	IndomainOutlinks  []*OutLink `protobuf:"bytes,9,rep,name=indomain_outlinks" json:"indomain_outlinks,omitempty"`
	OutdomainOutlinks []*OutLink `protobuf:"bytes,10,rep,name=outdomain_outlinks" json:"outdomain_outlinks,omitempty"`
	// content hash(128 bit)
	Chash_0 int64 `protobuf:"varint,11,opt,name=chash_0" json:"chash_0,omitempty"`
	Chash_1 int64 `protobuf:"varint,12,opt,name=chash_1" json:"chash_1,omitempty"`
	// original encoding which is deteched by the page content
	OrigEncoding int32 `protobuf:"varint,13,opt,name=orig_encoding" json:"orig_encoding,omitempty"`
	// encoding after convert to utf8
	// the same with orig_encoding if convert fail
	// utf8 if convert success
	ConvEncoding int32 `protobuf:"varint,14,opt,name=conv_encoding" json:"conv_encoding,omitempty"`
	// language the page is detected to
	Language int32 `protobuf:"varint,15,opt,name=language" json:"language,omitempty"`
	// content type of the page, eg text/html
	ContentType string      `protobuf:"bytes,16,opt,name=content_type" json:"content_type,omitempty"`
	Header      string      `protobuf:"bytes,18,opt,name=header" json:"header,omitempty"`
	TimeUsed    int64       `protobuf:"varint,19,opt,name=time_used" json:"time_used,omitempty"`
	Reservation string      `protobuf:"bytes,20,opt,name=reservation" json:"reservation,omitempty"`
	CrawlParam  *CrawlParam `protobuf:"bytes,21,opt,name=crawl_param" json:"crawl_param,omitempty"`
}

func (m *CrawlDoc) Reset()                    { *m = CrawlDoc{} }
func (m *CrawlDoc) String() string            { return proto1.CompactTextString(m) }
func (*CrawlDoc) ProtoMessage()               {}
func (*CrawlDoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CrawlDoc) GetIndomainOutlinks() []*OutLink {
	if m != nil {
		return m.IndomainOutlinks
	}
	return nil
}

func (m *CrawlDoc) GetOutdomainOutlinks() []*OutLink {
	if m != nil {
		return m.OutdomainOutlinks
	}
	return nil
}

func (m *CrawlDoc) GetCrawlParam() *CrawlParam {
	if m != nil {
		return m.CrawlParam
	}
	return nil
}

type CrawlDocs struct {
	Docs []*CrawlDoc `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
}

func (m *CrawlDocs) Reset()                    { *m = CrawlDocs{} }
func (m *CrawlDocs) String() string            { return proto1.CompactTextString(m) }
func (*CrawlDocs) ProtoMessage()               {}
func (*CrawlDocs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CrawlDocs) GetDocs() []*CrawlDoc {
	if m != nil {
		return m.Docs
	}
	return nil
}

type CrawlRequest struct {
	Request string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto1.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type CrawlResponse struct {
	Ok  bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Ret int64 `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto1.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto1.RegisterType((*ConnectionInfo)(nil), "proto.ConnectionInfo")
	proto1.RegisterType((*OutLink)(nil), "proto.OutLink")
	proto1.RegisterType((*FetchHint)(nil), "proto.FetchHint")
	proto1.RegisterType((*CrawlParam)(nil), "proto.CrawlParam")
	proto1.RegisterType((*CrawlHistory)(nil), "proto.CrawlHistory")
	proto1.RegisterType((*CrawlDoc)(nil), "proto.CrawlDoc")
	proto1.RegisterType((*CrawlDocs)(nil), "proto.CrawlDocs")
	proto1.RegisterType((*CrawlRequest)(nil), "proto.CrawlRequest")
	proto1.RegisterType((*CrawlResponse)(nil), "proto.CrawlResponse")
	proto1.RegisterEnum("proto.ReturnType", ReturnType_name, ReturnType_value)
	proto1.RegisterEnum("proto.RequestType", RequestType_name, RequestType_value)
	proto1.RegisterEnum("proto.Priority", Priority_name, Priority_value)
	proto1.RegisterEnum("proto.DocType", DocType_name, DocType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CrawlService service

type CrawlServiceClient interface {
	Feed(ctx context.Context, in *CrawlDocs, opts ...grpc.CallOption) (*CrawlResponse, error)
	IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlServiceClient struct {
	cc *grpc.ClientConn
}

func NewCrawlServiceClient(cc *grpc.ClientConn) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) Feed(ctx context.Context, in *CrawlDocs, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/Feed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/IsHealthy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrawlService service

type CrawlServiceServer interface {
	Feed(context.Context, *CrawlDocs) (*CrawlResponse, error)
	IsHealthy(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServiceServer(s *grpc.Server, srv CrawlServiceServer) {
	s.RegisterService(&_CrawlService_serviceDesc, srv)
}

func _CrawlService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlDocs)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).Feed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CrawlService_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).IsHealthy(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CrawlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _CrawlService_Feed_Handler,
		},
		{
			MethodName: "IsHealthy",
			Handler:    _CrawlService_IsHealthy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x56, 0x5b, 0x73, 0xda, 0xd6,
	0x16, 0x8e, 0x0d, 0x18, 0x58, 0x60, 0xbc, 0xbc, 0x93, 0x9c, 0xc3, 0xc9, 0x39, 0x67, 0x9a, 0xd0,
	0x76, 0x92, 0xf1, 0x4c, 0x13, 0x03, 0xb6, 0x93, 0x4c, 0xa7, 0x0f, 0x18, 0x64, 0x9b, 0x06, 0x4b,
	0xee, 0x46, 0x34, 0xd3, 0x27, 0x46, 0x06, 0xd9, 0x68, 0x62, 0x4b, 0x54, 0x92, 0xd3, 0xba, 0x7f,
	0xa1, 0x2f, 0xbd, 0xdf, 0xaf, 0xef, 0xbd, 0xf7, 0x3f, 0x74, 0x7a, 0x7f, 0xee, 0x0f, 0xe9, 0xf5,
	0xa1, 0x9d, 0xae, 0xbd, 0x25, 0x01, 0x3b, 0xd3, 0x3c, 0x79, 0x7f, 0xdf, 0x5a, 0x6b, 0x6b, 0x5d,
	0xbe, 0xb5, 0x0d, 0x94, 0x06, 0xbe, 0xf5, 0xcc, 0xd1, 0xd0, 0x1b, 0x5c, 0x1d, 0xfb, 0x5e, 0xe8,
	0xb1, 0x8c, 0xfc, 0x53, 0xb9, 0x01, 0xa5, 0xa6, 0xe7, 0xba, 0xf6, 0x20, 0x74, 0x3c, 0xb7, 0xed,
	0x1e, 0x78, 0x8c, 0x41, 0x7a, 0xe4, 0x05, 0x61, 0x79, 0xee, 0xe2, 0xdc, 0x95, 0x3c, 0x97, 0x67,
	0xc1, 0x8d, 0x3d, 0x3f, 0x2c, 0xcf, 0x13, 0x97, 0xe1, 0xf2, 0x5c, 0xb9, 0x06, 0x59, 0xe3, 0x24,
	0xec, 0x38, 0xee, 0x1d, 0x86, 0x90, 0x3a, 0xf1, 0x8f, 0xe2, 0x08, 0x71, 0x14, 0x01, 0xa1, 0xfd,
	0x6c, 0x14, 0x40, 0x97, 0x88, 0x73, 0x25, 0x84, 0xfc, 0x96, 0x1d, 0x0e, 0x46, 0x3b, 0x8e, 0x1b,
	0xde, 0xf7, 0x2b, 0x56, 0x38, 0x4a, 0x82, 0xc4, 0x99, 0x95, 0x60, 0xde, 0x19, 0x97, 0x53, 0xf2,
	0xbb, 0x74, 0x9a, 0x64, 0x92, 0x9e, 0x66, 0xc2, 0xfe, 0x0b, 0xf9, 0x31, 0xc5, 0xf7, 0x87, 0x56,
	0x68, 0x95, 0x33, 0x32, 0x38, 0x27, 0x88, 0x16, 0xe1, 0xca, 0xf3, 0x69, 0x80, 0xa6, 0x28, 0x7d,
	0xcf, 0xf2, 0xad, 0x63, 0x76, 0x09, 0x52, 0x63, 0xdf, 0x91, 0x9f, 0x2d, 0xd5, 0x96, 0xa2, 0x5e,
	0x5c, 0xdd, 0xf3, 0x1d, 0xcf, 0x77, 0xc2, 0x53, 0x2e, 0x6c, 0xec, 0x02, 0xe4, 0x44, 0x3a, 0x47,
	0x9e, 0x35, 0x8c, 0x0b, 0x9e, 0x60, 0x76, 0x19, 0x96, 0x7c, 0xcb, 0x1d, 0x7a, 0xc7, 0xfd, 0x89,
	0x8b, 0xc8, 0x2d, 0xc7, 0x4b, 0x11, 0xbd, 0x93, 0x38, 0x5e, 0x82, 0xe2, 0xd0, 0xf7, 0xc6, 0xfd,
	0x81, 0xe7, 0x86, 0xb6, 0x1b, 0xe5, 0x9b, 0xe3, 0x05, 0xc1, 0x35, 0x23, 0x8a, 0x3d, 0x04, 0x99,
	0x61, 0x78, 0x3a, 0xb6, 0x65, 0xca, 0xa5, 0x5a, 0x29, 0x4e, 0xa6, 0xe5, 0x0d, 0x4c, 0x62, 0x79,
	0x64, 0x64, 0xff, 0x07, 0x08, 0x42, 0xcf, 0xb7, 0xfb, 0xb2, 0x35, 0x0b, 0xb2, 0xba, 0xbc, 0x64,
	0xf6, 0x44, 0x7f, 0xfe, 0x03, 0xb9, 0xc8, 0x3c, 0xdc, 0x2f, 0x67, 0xa5, 0x31, 0x2b, 0x71, 0x6b,
	0x9f, 0x3d, 0x00, 0x85, 0xc8, 0x14, 0x5a, 0xfb, 0x47, 0x76, 0x39, 0x27, 0xad, 0xd1, 0x65, 0xa6,
	0x60, 0x44, 0xdf, 0x0e, 0xac, 0x3b, 0xb6, 0x2c, 0xa5, 0x9c, 0x8f, 0xfa, 0x26, 0x08, 0x51, 0x04,
	0xbb, 0x02, 0x19, 0x5f, 0x66, 0x07, 0x32, 0x3b, 0x16, 0x67, 0xc7, 0xed, 0xa7, 0x4f, 0xec, 0x20,
	0x8c, 0x32, 0x94, 0x0e, 0xec, 0x1a, 0xc0, 0x81, 0x98, 0x6b, 0x7f, 0x44, 0x83, 0x2d, 0x17, 0xc8,
	0xbd, 0x50, 0xc3, 0xd8, 0x7d, 0x32, 0x70, 0x9e, 0x3f, 0x98, 0xcc, 0xbe, 0x0e, 0x79, 0xdf, 0x1e,
	0xd8, 0xce, 0x5d, 0xdb, 0x0f, 0xca, 0xc5, 0x8b, 0x29, 0xf2, 0x3f, 0x1f, 0xfb, 0xab, 0x5a, 0xe4,
	0x53, 0x3f, 0x51, 0x0d, 0x0d, 0xe7, 0xd8, 0xf2, 0x4f, 0xa9, 0x9e, 0xc3, 0xf2, 0x62, 0x54, 0x4d,
	0x4c, 0x99, 0xd6, 0x21, 0x7b, 0x10, 0x16, 0x03, 0x9b, 0xda, 0x3d, 0x4c, 0x5c, 0x4a, 0x74, 0x73,
	0x9e, 0x17, 0x27, 0x24, 0x39, 0x55, 0x4a, 0x50, 0x94, 0x62, 0xd8, 0x71, 0x44, 0x1f, 0x4e, 0x2b,
	0x5f, 0x65, 0x20, 0x27, 0x09, 0xea, 0x3a, 0x3b, 0x47, 0x03, 0xf1, 0x06, 0xce, 0x30, 0x16, 0x65,
	0x04, 0xc4, 0x87, 0xfd, 0xa8, 0xe8, 0xbe, 0x10, 0x79, 0x24, 0x4e, 0x88, 0xa9, 0x1e, 0x69, 0x3d,
	0x56, 0x7f, 0x6a, 0xaa, 0x7e, 0x1a, 0xbe, 0x6f, 0x0f, 0x1d, 0x4a, 0x3e, 0x8a, 0x49, 0x4b, 0x53,
	0x21, 0xe1, 0x44, 0xd0, 0xc3, 0x90, 0x1e, 0x78, 0xc3, 0x64, 0xf6, 0xcb, 0x93, 0xee, 0x86, 0x27,
	0xbe, 0x2b, 0x9b, 0x2b, 0xcd, 0xac, 0x0c, 0xd9, 0x44, 0x41, 0xd1, 0xe8, 0x13, 0xc8, 0x1e, 0x01,
	0x16, 0x1f, 0x49, 0x63, 0xc7, 0x63, 0xdf, 0x0e, 0x02, 0x7b, 0x28, 0x25, 0x90, 0xe3, 0xcb, 0xb1,
	0xa5, 0x39, 0x31, 0xb0, 0xff, 0x41, 0x3e, 0x74, 0x8e, 0x29, 0x63, 0xeb, 0x78, 0x2c, 0xa5, 0x90,
	0xe2, 0x53, 0x82, 0x3d, 0x0a, 0xcb, 0x8e, 0x90, 0xaf, 0xe5, 0xb8, 0x7d, 0xef, 0x24, 0x3c, 0xa2,
	0xa5, 0x0e, 0x48, 0x11, 0x62, 0x32, 0x89, 0x2c, 0xe3, 0x5d, 0xe7, 0x98, 0x38, 0x1a, 0xb1, 0x1f,
	0x7b, 0x0c, 0x18, 0xc5, 0xdc, 0x1b, 0x0d, 0xff, 0x18, 0xbd, 0x3c, 0xf1, 0x9c, 0x84, 0xff, 0x9b,
	0x4a, 0x1c, 0x59, 0xc1, 0xa8, 0xbf, 0x2a, 0xb5, 0x93, 0xe2, 0x0b, 0x12, 0xae, 0x4e, 0x0d, 0x55,
	0x12, 0xc9, 0xd4, 0x50, 0x15, 0x93, 0xa6, 0x75, 0x3d, 0xec, 0xdb, 0x2e, 0xf5, 0xc8, 0x71, 0x23,
	0x31, 0x64, 0x78, 0x51, 0x90, 0x5a, 0xcc, 0x09, 0x27, 0xea, 0xc2, 0xdd, 0xa9, 0x53, 0x29, 0x72,
	0x12, 0xe4, 0xc4, 0x89, 0x56, 0xfd, 0xc8, 0x72, 0x0f, 0x4f, 0xac, 0x43, 0xbb, 0xbc, 0x14, 0xad,
	0x7a, 0x82, 0xc5, 0x10, 0x93, 0x06, 0xcb, 0x3d, 0xc0, 0x68, 0x88, 0x31, 0x27, 0x66, 0xc4, 0xfe,
	0x05, 0x0b, 0x23, 0xdb, 0x1a, 0xda, 0x7e, 0x99, 0x49, 0x63, 0x8c, 0xc4, 0x62, 0x89, 0xde, 0xf6,
	0x4f, 0xc4, 0x48, 0xce, 0xca, 0xdc, 0x73, 0x82, 0xe8, 0x89, 0x49, 0x5c, 0x14, 0x7a, 0x0a, 0x6c,
	0xff, 0xae, 0x25, 0x64, 0x5e, 0x3e, 0x97, 0x68, 0x63, 0x42, 0xb1, 0x1a, 0x14, 0xe4, 0x63, 0x4d,
	0x2b, 0x4f, 0x4f, 0x56, 0xf9, 0xbc, 0xdc, 0xa8, 0x44, 0x22, 0xd3, 0xb7, 0x8c, 0xc3, 0x60, 0x72,
	0xae, 0xac, 0x42, 0x3e, 0xd1, 0x71, 0x40, 0xb5, 0xa7, 0x49, 0xbb, 0x01, 0xe9, 0x58, 0xcc, 0x60,
	0x69, 0x36, 0x92, 0xec, 0x5c, 0x1a, 0x2b, 0x57, 0xe2, 0x55, 0x88, 0x37, 0x5a, 0x48, 0x2d, 0x16,
	0x75, 0xac, 0xff, 0x04, 0x56, 0xaa, 0xb0, 0x18, 0x7b, 0x06, 0x63, 0xcf, 0x0d, 0x6c, 0xf1, 0x28,
	0x7b, 0x77, 0xa4, 0x57, 0x8e, 0xd3, 0x49, 0x6c, 0x80, 0x6f, 0x47, 0x8f, 0x7d, 0x8a, 0x8b, 0xe3,
	0xca, 0x4f, 0x59, 0x80, 0xa9, 0x98, 0x59, 0x01, 0xb2, 0x3d, 0xfd, 0x96, 0x6e, 0xdc, 0xd6, 0xf1,
	0x0c, 0xcb, 0x43, 0x46, 0x37, 0x5a, 0x7a, 0x17, 0xe7, 0x28, 0xb0, 0xa8, 0x1b, 0x4d, 0x43, 0xd7,
	0xb5, 0xa6, 0xd9, 0x36, 0x74, 0x9c, 0x67, 0x67, 0x61, 0x69, 0xcb, 0xe0, 0x9b, 0xed, 0x56, 0x4b,
	0xd3, 0xb9, 0xb1, 0x69, 0x98, 0x5d, 0x4c, 0x89, 0x70, 0xb3, 0xbd, 0xab, 0x19, 0x3d, 0x13, 0xd3,
	0x02, 0x6c, 0x36, 0x5a, 0xe6, 0x53, 0x7b, 0x1a, 0x66, 0x18, 0xc0, 0x82, 0x69, 0x18, 0x9b, 0xed,
	0x6d, 0x5c, 0x60, 0x8b, 0x90, 0x27, 0xc3, 0x8e, 0xd6, 0x68, 0x69, 0x1c, 0xb3, 0xf2, 0x6e, 0xcd,
	0xbc, 0x6d, 0xf0, 0x5b, 0x1a, 0xe7, 0x06, 0xc7, 0x1c, 0x5b, 0x86, 0xc5, 0x6e, 0xdb, 0xd4, 0x9e,
	0xe8, 0x69, 0x3d, 0x6d, 0xab, 0xd7, 0xe9, 0x60, 0x9e, 0x2a, 0x81, 0xb6, 0xfe, 0x64, 0xa3, 0xd3,
	0x6e, 0xf5, 0x78, 0x07, 0x81, 0x26, 0xca, 0x62, 0xcc, 0xb5, 0x56, 0x9b, 0x53, 0x5a, 0x82, 0x2f,
	0x88, 0xd0, 0x5d, 0xcd, 0x6c, 0xf4, 0x13, 0x16, 0x8b, 0x6c, 0x09, 0x0a, 0x8f, 0x77, 0xa7, 0xc4,
	0x22, 0xfd, 0x6b, 0x2a, 0xb5, 0xf7, 0xfa, 0x9b, 0x9d, 0x46, 0xf3, 0x56, 0xa7, 0xdd, 0x35, 0xb5,
	0x16, 0x96, 0xc4, 0xfd, 0x94, 0x13, 0x55, 0x68, 0x6a, 0xba, 0x89, 0x4b, 0xa2, 0x3c, 0xba, 0x50,
	0x71, 0x42, 0x91, 0x78, 0xd7, 0x6c, 0x98, 0xbd, 0x6e, 0x75, 0x75, 0x15, 0x87, 0xb3, 0xb0, 0x8a,
	0xa2, 0xd9, 0x31, 0xac, 0x91, 0xf5, 0xeb, 0xb9, 0x59, 0x5c, 0xc5, 0x6f, 0x14, 0x5c, 0xc3, 0x6f,
	0x15, 0x5c, 0xc7, 0xef, 0x14, 0xbc, 0x86, 0xdf, 0x2b, 0x78, 0x1d, 0x7f, 0x50, 0xf0, 0x06, 0xfe,
	0x38, 0x83, 0xeb, 0xf4, 0xbd, 0x8f, 0xe6, 0x67, 0x71, 0x15, 0x3f, 0x56, 0x70, 0x0d, 0x3f, 0x51,
	0x70, 0x1d, 0x3f, 0x55, 0xf0, 0x1a, 0x7e, 0xa6, 0xe0, 0x75, 0xfc, 0x5c, 0xc1, 0x1b, 0xf8, 0x85,
	0x82, 0xaf, 0xe3, 0x97, 0x33, 0x78, 0x8d, 0xbe, 0xff, 0x42, 0x6a, 0x16, 0x57, 0xf1, 0x45, 0x05,
	0xd7, 0xf0, 0x25, 0x05, 0xd7, 0xf1, 0x65, 0x05, 0xaf, 0xe1, 0x2b, 0x0a, 0x5e, 0xc7, 0x57, 0x15,
	0xbc, 0x81, 0xaf, 0x29, 0xf8, 0x3a, 0xbe, 0xae, 0xe0, 0x1b, 0xf8, 0x86, 0x82, 0x6f, 0xe2, 0x9b,
	0xb3, 0xb8, 0xba, 0x8a, 0x6f, 0x29, 0xb8, 0x8a, 0x6f, 0x2b, 0xb8, 0x86, 0xef, 0x28, 0xb8, 0x8e,
	0xef, 0x2a, 0x78, 0x0d, 0xdf, 0x53, 0xf0, 0x3a, 0xbe, 0xaf, 0xe0, 0x0d, 0xfc, 0x40, 0xc1, 0xd7,
	0xf1, 0xc3, 0x19, 0xbc, 0x4e, 0xfd, 0xf9, 0x59, 0xc1, 0x55, 0xfc, 0x45, 0xc1, 0x35, 0xfc, 0x55,
	0xc1, 0x75, 0xfc, 0x4d, 0xc1, 0x6b, 0xf8, 0xbb, 0x82, 0xd7, 0xf1, 0x0f, 0x05, 0xdf, 0xc4, 0x3f,
	0x67, 0x31, 0xd5, 0xfb, 0x57, 0x6a, 0xe5, 0x32, 0x14, 0x66, 0x7e, 0x04, 0xc8, 0xdd, 0xd4, 0xba,
	0x66, 0x5b, 0xdf, 0xa6, 0xd5, 0x26, 0xb0, 0xad, 0xe9, 0x1a, 0x6f, 0x74, 0x70, 0x6e, 0xa5, 0x02,
	0xb9, 0xe4, 0x87, 0x95, 0xd8, 0x53, 0xdd, 0xe0, 0xbb, 0xc4, 0x9f, 0x11, 0xe7, 0x1e, 0xdf, 0x16,
	0xfb, 0x30, 0xb7, 0xd2, 0x82, 0x6c, 0xfc, 0x7b, 0x47, 0xc8, 0x3e, 0x72, 0x69, 0x19, 0x4d, 0xf2,
	0x2a, 0x42, 0xee, 0xb6, 0xb6, 0xd9, 0xdf, 0x6d, 0xb4, 0x75, 0x7a, 0x28, 0xe8, 0x62, 0x81, 0x76,
	0x7a, 0x9b, 0xf4, 0x46, 0xd0, 0xe6, 0x09, 0x90, 0x6c, 0x55, 0xaa, 0xf6, 0x5c, 0xfc, 0x94, 0x75,
	0xe9, 0x09, 0x75, 0x06, 0x36, 0x5b, 0x85, 0xf4, 0x96, 0x4d, 0x4f, 0x2d, 0xde, 0xf3, 0xf2, 0x05,
	0x17, 0xce, 0xcd, 0x32, 0xc9, 0x7b, 0x56, 0x39, 0xc3, 0x6e, 0x40, 0xbe, 0x1d, 0xec, 0xd8, 0xd6,
	0x51, 0x38, 0x3a, 0x65, 0x67, 0x55, 0x27, 0x59, 0xeb, 0xfd, 0x22, 0xf7, 0x17, 0x24, 0x5d, 0xff,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x99, 0x39, 0x1d, 0xa1, 0x60, 0x0b, 0x00, 0x00,
}
