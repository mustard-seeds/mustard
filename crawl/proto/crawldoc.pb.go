// Code generated by protoc-gen-go.
// source: crawldoc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	crawldoc.proto

It has these top-level messages:
	CrawlParam
	CrawlHistory
	CrawlDoc
	CrawlRequest
	CrawlResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type CrawlParam struct {
}

func (m *CrawlParam) Reset()                    { *m = CrawlParam{} }
func (m *CrawlParam) String() string            { return proto1.CompactTextString(m) }
func (*CrawlParam) ProtoMessage()               {}
func (*CrawlParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CrawlHistory struct {
}

func (m *CrawlHistory) Reset()                    { *m = CrawlHistory{} }
func (m *CrawlHistory) String() string            { return proto1.CompactTextString(m) }
func (*CrawlHistory) ProtoMessage()               {}
func (*CrawlHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CrawlDoc struct {
	Docid string `protobuf:"bytes,1,opt,name=docid" json:"docid,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *CrawlDoc) Reset()                    { *m = CrawlDoc{} }
func (m *CrawlDoc) String() string            { return proto1.CompactTextString(m) }
func (*CrawlDoc) ProtoMessage()               {}
func (*CrawlDoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CrawlRequest struct {
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto1.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CrawlResponse struct {
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto1.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto1.RegisterType((*CrawlParam)(nil), "proto.CrawlParam")
	proto1.RegisterType((*CrawlHistory)(nil), "proto.CrawlHistory")
	proto1.RegisterType((*CrawlDoc)(nil), "proto.CrawlDoc")
	proto1.RegisterType((*CrawlRequest)(nil), "proto.CrawlRequest")
	proto1.RegisterType((*CrawlResponse)(nil), "proto.CrawlResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CrawlService service

type CrawlServiceClient interface {
	Feed(ctx context.Context, in *CrawlDoc, opts ...grpc.CallOption) (*CrawlResponse, error)
	IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlServiceClient struct {
	cc *grpc.ClientConn
}

func NewCrawlServiceClient(cc *grpc.ClientConn) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) Feed(ctx context.Context, in *CrawlDoc, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/Feed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) IsHealthy(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/proto.CrawlService/IsHealthy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrawlService service

type CrawlServiceServer interface {
	Feed(context.Context, *CrawlDoc) (*CrawlResponse, error)
	IsHealthy(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServiceServer(s *grpc.Server, srv CrawlServiceServer) {
	s.RegisterService(&_CrawlService_serviceDesc, srv)
}

func _CrawlService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlDoc)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).Feed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CrawlService_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServiceServer).IsHealthy(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CrawlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _CrawlService_Feed_Handler,
		},
		{
			MethodName: "IsHealthy",
			Handler:    _CrawlService_IsHealthy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2e, 0x4a, 0x2c,
	0xcf, 0x49, 0xc9, 0x4f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x3c,
	0x5c, 0x5c, 0xce, 0x20, 0x89, 0x80, 0xc4, 0xa2, 0xc4, 0x5c, 0x25, 0x3e, 0x2e, 0x1e, 0x30, 0xcf,
	0x23, 0xb3, 0xb8, 0x24, 0xbf, 0xa8, 0x52, 0xc9, 0x88, 0x8b, 0x03, 0xcc, 0x77, 0xc9, 0x4f, 0x16,
	0x12, 0xe1, 0x62, 0x05, 0xea, 0xce, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70,
	0x84, 0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72, 0x24, 0x98, 0xc0, 0x62, 0x20, 0x26, 0xdc, 0x8c, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x7e, 0x2e, 0x5e, 0x28, 0xbf, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0xd5, 0xa8, 0x12, 0xaa, 0x20, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x9f, 0x8b,
	0xc5, 0x2d, 0x35, 0x35, 0x45, 0x88, 0x1f, 0xe2, 0x32, 0x3d, 0x98, 0x8d, 0x52, 0x22, 0xc8, 0x02,
	0x30, 0xed, 0x4a, 0x0c, 0x42, 0x16, 0x5c, 0x9c, 0x9e, 0xc5, 0x1e, 0xa9, 0x89, 0x39, 0x25, 0x19,
	0x95, 0x42, 0xc2, 0xa8, 0x8a, 0xc0, 0x76, 0xe2, 0xd2, 0x99, 0xc4, 0x06, 0x16, 0x36, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x82, 0xed, 0x61, 0x35, 0x0d, 0x01, 0x00, 0x00,
}
