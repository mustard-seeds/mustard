// Code generated by protoc-gen-go.
// source: example.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	Person
	GreetRequest
	GreetResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type Person struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto1.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GreetRequest struct {
	Person  *Person          `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
	Hobbies []string         `protobuf:"bytes,2,rep,name=hobbies" json:"hobbies,omitempty"`
	Keyword map[string]int32 `protobuf:"bytes,3,rep,name=keyword" json:"keyword,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *GreetRequest) Reset()                    { *m = GreetRequest{} }
func (m *GreetRequest) String() string            { return proto1.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()               {}
func (*GreetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GreetRequest) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *GreetRequest) GetKeyword() map[string]int32 {
	if m != nil {
		return m.Keyword
	}
	return nil
}

type GreetResponse struct {
	Content     string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Attatchment string `protobuf:"bytes,2,opt,name=attatchment" json:"attatchment,omitempty"`
}

func (m *GreetResponse) Reset()                    { *m = GreetResponse{} }
func (m *GreetResponse) String() string            { return proto1.CompactTextString(m) }
func (*GreetResponse) ProtoMessage()               {}
func (*GreetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*Person)(nil), "proto.Person")
	proto1.RegisterType((*GreetRequest)(nil), "proto.GreetRequest")
	proto1.RegisterType((*GreetResponse)(nil), "proto.GreetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for GreetingService service

type GreetingServiceClient interface {
	Greeting(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetOnce(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetMulti(ctx context.Context, opts ...grpc.CallOption) (GreetingService_GreetMultiClient, error)
}

type greetingServiceClient struct {
	cc *grpc.ClientConn
}

func NewGreetingServiceClient(cc *grpc.ClientConn) GreetingServiceClient {
	return &greetingServiceClient{cc}
}

func (c *greetingServiceClient) Greeting(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := grpc.Invoke(ctx, "/proto.GreetingService/Greeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingServiceClient) GreetOnce(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := grpc.Invoke(ctx, "/proto.GreetingService/GreetOnce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingServiceClient) GreetMulti(ctx context.Context, opts ...grpc.CallOption) (GreetingService_GreetMultiClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetingService_serviceDesc.Streams[0], c.cc, "/proto.GreetingService/GreetMulti", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceGreetMultiClient{stream}
	return x, nil
}

type GreetingService_GreetMultiClient interface {
	Send(*GreetRequest) error
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetingServiceGreetMultiClient struct {
	grpc.ClientStream
}

func (x *greetingServiceGreetMultiClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceGreetMultiClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GreetingService service

type GreetingServiceServer interface {
	Greeting(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetOnce(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetMulti(GreetingService_GreetMultiServer) error
}

func RegisterGreetingServiceServer(s *grpc.Server, srv GreetingServiceServer) {
	s.RegisterService(&_GreetingService_serviceDesc, srv)
}

func _GreetingService_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GreetingServiceServer).Greeting(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GreetingService_GreetOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GreetingServiceServer).GreetOnce(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GreetingService_GreetMulti_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).GreetMulti(&greetingServiceGreetMultiServer{stream})
}

type GreetingService_GreetMultiServer interface {
	Send(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetingServiceGreetMultiServer struct {
	grpc.ServerStream
}

func (x *greetingServiceGreetMultiServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceGreetMultiServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GreetingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GreetingService",
	HandlerType: (*GreetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _GreetingService_Greeting_Handler,
		},
		{
			MethodName: "GreetOnce",
			Handler:    _GreetingService_GreetOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetMulti",
			Handler:       _GreetingService_GreetMulti_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x8f, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0xff, 0xdb, 0xfe, 0xdb, 0xda, 0x69, 0x8b, 0x32, 0xf6, 0x10, 0x7a, 0x0a, 0x01, 0xa1,
	0xa7, 0x20, 0xf1, 0x60, 0x09, 0x78, 0x14, 0x0f, 0x45, 0x94, 0xf8, 0x04, 0x9b, 0x38, 0xb4, 0xc1,
	0x64, 0x37, 0x6e, 0x36, 0xd5, 0x3e, 0x9f, 0x07, 0x5f, 0xcb, 0xcd, 0x26, 0x81, 0x08, 0x5e, 0x7a,
	0xda, 0x99, 0xef, 0xdb, 0xef, 0x37, 0x33, 0xb0, 0xa0, 0x4f, 0x9e, 0x17, 0x19, 0xf9, 0x85, 0x92,
	0x5a, 0xe2, 0xc8, 0x3e, 0x9e, 0x0f, 0xe3, 0x67, 0x52, 0xa5, 0x14, 0x88, 0xf0, 0x5f, 0xf0, 0x9c,
	0x1c, 0xe6, 0xb2, 0xf5, 0x34, 0xb2, 0x35, 0x5e, 0xc0, 0x90, 0xef, 0xc8, 0x19, 0x18, 0x69, 0x14,
	0xd5, 0xa5, 0xf7, 0xcd, 0x60, 0xfe, 0xa0, 0x88, 0x74, 0x44, 0xef, 0x15, 0x95, 0x1a, 0xaf, 0x60,
	0x5c, 0x58, 0x80, 0x0d, 0xce, 0x82, 0x45, 0xc3, 0xf7, 0x1b, 0x6a, 0xd4, 0x9a, 0xe8, 0xc0, 0x64,
	0x2f, 0xe3, 0x38, 0xa5, 0xd2, 0xd0, 0x86, 0x66, 0x40, 0xd7, 0x62, 0x08, 0x93, 0x37, 0x3a, 0x7e,
	0x48, 0xf5, 0xea, 0x0c, 0x8d, 0x33, 0x0b, 0xdc, 0x96, 0xd0, 0x1f, 0xe3, 0x6f, 0x9b, 0x2f, 0xf7,
	0x42, 0xab, 0x63, 0xd4, 0x05, 0x56, 0x21, 0xcc, 0xfb, 0x46, 0xbd, 0xaf, 0xb1, 0xda, 0x13, 0xea,
	0x12, 0x97, 0x30, 0x3a, 0xf0, 0xac, 0xea, 0x6e, 0x68, 0x9a, 0x70, 0xb0, 0x61, 0xde, 0x16, 0x16,
	0xed, 0x84, 0xb2, 0x90, 0xa2, 0xa4, 0x7a, 0xc5, 0x44, 0x0a, 0x4d, 0x42, 0xb7, 0x80, 0xae, 0x45,
	0x17, 0x66, 0x5c, 0x6b, 0xae, 0x93, 0x7d, 0x5e, 0xbb, 0x03, 0xeb, 0xf6, 0xa5, 0xe0, 0x8b, 0xc1,
	0xb9, 0xa5, 0xa5, 0x62, 0xf7, 0x42, 0xea, 0x90, 0x26, 0x84, 0xb7, 0x70, 0xd6, 0x49, 0x78, 0xf9,
	0xc7, 0x4d, 0xab, 0xe5, 0x6f, 0xb1, 0x59, 0xc3, 0xfb, 0x87, 0x1b, 0x98, 0x5a, 0xe9, 0x49, 0x18,
	0xca, 0x49, 0xc9, 0x3b, 0x00, 0x2b, 0x3d, 0x56, 0x99, 0x4e, 0x4f, 0x8a, 0xae, 0xd9, 0x35, 0x8b,
	0xc7, 0xd6, 0xba, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x00, 0xb5, 0x9e, 0x25, 0x2b, 0x02, 0x00,
	0x00,
}
